Project TODOs
-------------------------------------
1. Deploy Digital Ocean Droplet
    - integrate cloudflare:
        - reconfigure dns to point to droplets ip address
        - configure cloudflare using dns
        - reconfigure dns to point to provided coudflare ips
    - setup CI/CD flow
        - seperate dbs for dev, test, and prod enviornment
        - clone prod env in a 'test' vm
    - setup aggregators
        - systemd timer services
            - start psql server
            - run event scraper every sunday (init grab), wed and friday, events info confirmation
            - run artist, album, and songs scraper every sunday
            - run songs scrapers every sunday, monday
            - run youtubeurl scraper everyday
                - pause whenever events, artist, or songLFM are running
        - modularize services
            - improve robustness
            - improve tracability with logging
                - Add tracer tables for each db object
                    - track which python script and function it was created by and last updated by
                    - if errored, error message
                    - log file to check
    - ensure security of server due to port forwarding
        - nixos read only system, setup private package repository
        - cloud flare waf and ddos
    
2. Light/Dark mode 
    - dynamically get from system default
    - add toggle on home page
3. About page:
    - Highlight open source github repo
    - Upcoming features
    - Explain why in beta, and potential performance limitations


Upgrades
-----------------------------
Backend:
    1. Refactor DB quieres to optimize for speed:
        - indexing
        - caching events/venues ids
    2. Implement search feature
        search in following order:
        - for location
        - events
        - artists
        - album
        - songs
        only searches filtered results
    3. Create a script that autogenerates spotify playlists based on:
        - popular
        - this is seattle playlist:
            - completely random selection of all seattle song selection
            - spotify only allows 10,000 songs per playlist so need to set up script that will update the tracklist randomly every day?
    4. Make ui more visually pleasing
        - Get Artist images
            - lastfm:
                - need seperate aggreation script to pull images, and genre tags
                - either scrape artist main page or use (https://www.last.fm/api/show/artist.getInfo)
        - get album images
        - get venue images
    5. Filter
        - add map area filter
    6. Create a script that autogenerates spotify playlists based on:
        - popular
        - this is seattle playlist:
            - completely random selection of all seattle song selection
            - spotify only allows 10,000 songs per playlist so need to set up script that will update the tracklist randomly every day?
    7. Add logic to measure data aggregattor efficiency
Frontend:
    1. Create About page:
        - Reasons behind website:
            - unemployed / resume builder / open source on github
                - Document reasoning behind choices behind specific
            - hard to keep up with live music scene manually
            - essentially all of seattle's bookers are your dj
                - makes discovery feel more organic
            - time capsule for seattle music scene (fuck 90s on 9, )
            - supporting local artist
    2. Fix Landing Page:
        - radio emulator
            - antena
            - youtube toggle
        - data analysis features:
            - performing today, this week, this month, this year:
                - user choose date range and card profiles of relevant artists pop up
             - random performing today
            - biggest/smallest artists performing this month
            - total artists performing this weekend
            - total events this weekend
            - total songs
    3. Filter:
        - add available genres feature to typing in genre names to help with users knowing which genres exist
    4. Must add 'LISTEN ON SPOTIFY' spotify/lastfm urls to adhere to api rules
        - display in way of promoting artists
    5. Refactor lealet map:
        - different map overlays
        - show statistics visually:
            - genre geography
            - tickets bought frequency geography
    
    


    